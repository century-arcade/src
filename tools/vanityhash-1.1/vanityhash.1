.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "VANITYHASH 1"
.TH VANITYHASH 1 "2010-12-11" "" ""
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
vanityhash \- A hex hash fragment creation tool
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBvanityhash\fR [\ \fBoptions\fR\ ] hexfragment < inputfile
.PP
\&\fBvanityhash\fR \fB\-\-append\fR [\ \fBoptions\fR\ ] hexfragment < inputfile > outputfile
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBvanityhash\fR is a tool that can discover data to be added to the end 
of a file to produce a desired hex hash fragment.  It searches a 
message space and runs a hashing algorithm against the original data 
plus the appended data to determine if the desired hash fragment is 
present.  vanityhash can run multiple parallel workers to effectively 
make use of multiple processors/cores/threads, and supports multiple 
hash digest types (\s-1MD5\s0, \s-1SHA1\s0, \s-1SHA256\s0, etc).
.PP
vanityhash can be used to append data to files that are capable of 
ignoring garbage data at the end of the file (such as \s-1ISO\s0 images and 
some types of graphic images), in order to produce a \*(L"vanity\*(R" hash.  
vanityhash is fast, as it only reads the base input data once, and then 
reverts back to that base state over and over while it permeates the 
search space, rather than hashing the entire source during each 
permeation.
.PP
vanityhash operates on the concept of a \*(L"search space\*(R".  For example, 
given a 24\-bit search space, vanityhash will run from 0x00000000 to 
0x00ffffff, append the 4\-byte packed version of each number to the end 
of the input data, calculate the resulting hash, and search the hash 
value for the desired hex fragment pattern.  A desired hex fragment can 
be larger than the search space (for example, searching for \*(L"abcdef\*(R" in 
a 16\-bit search space), but the chances of finding a match reduce 
drastically the larger the desired hex fragment is.
.PP
In its default operation, vanityhash will search the entire specified 
search space and output all matching results to \s-1STDOUT\s0, one result per 
line, in the form \*(L"extradata hash\*(R", where both \*(L"extradata\*(R" and \*(L"hash\*(R" 
are in hex form.  When the \fB\-\-append\fR option is specified, this 
behavior changes.  If a match is found, the original input data plus 
the extra data (in byte form) are outputted, and searching ends after 
the first successful match.  If no matches are found, the original data 
only is outputted.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-b\fR \fIbits\fR, \fB\-\-bits\fR=\fIbits\fR" 4
.IX Item "-b bits, --bits=bits"
Space to be searched, in bits.  Allowed values range from 1 to 64.  
Default is 24.  Search spaces larger than 32 bits require a 64\-bit 
operating system, and a version of Perl compiled with 64\-bit integer 
support.
.IP "\fB\-p\fR \fIposition\fR, \fB\-\-position\fR=\fIposition\fR" 4
.IX Item "-p position, --position=position"
The position within the hex hash to look for the desired fragment, in 
hex digits.  The beginning starts at 0.  Default is 0.  A position that 
extends the fragment beyond the length of the hash is not allowed.
.IP "\fB\-y\fR, \fB\-\-any\-position\fR" 4
.IX Item "-y, --any-position"
When enabled, this option will override \fB\-\-position\fR and will return 
hashes that contain the desired fragment in any position within the 
hash.
.IP "\fB\-s\fR \fIseconds\fR, \fB\-\-progress\fR=\fIseconds\fR" 4
.IX Item "-s seconds, --progress=seconds"
The number of seconds between printing of progress lines, default 5 
seconds.  A decimal value may be specified.  A value of 0 disabled 
printing progress lines.
.IP "\fB\-w\fR \fIworkers\fR, \fB\-\-workers\fR=\fIworkers\fR" 4
.IX Item "-w workers, --workers=workers"
The number of workers to be spawned.  Default is 1.  Recommended value 
is the number of logical processors on the running system.
.IP "\fB\-d\fR \fIdigesttype\fR, \fB\-\-digest\fR=\fIdigesttype\fR" 4
.IX Item "-d digesttype, --digest=digesttype"
The hashing digest type to use.  Default is \*(L"md5\*(R" Allowed values are 
\&\*(L"md2\*(R", \*(L"md4\*(R", \*(L"md5\*(R", and "sha\fIN\fR" where \fIN\fR is a valid \s-1SHA\s0 digest 
value.  \*(L"sha1alt\*(R" is accepted to use Digest::SHA1 instead of 
Digest::SHA.  Note that for many digest types, the appropriate Perl 
module must be installed and available.
.IP "\fB\-a\fR, \fB\-\-append\fR" 4
.IX Item "-a, --append"
When enabled, the original data is outputted back to \s-1STDOUT\s0.  Then, 
when/if the first matching hash is found, the data fragment used to 
produce the matching hash is outputted to \s-1STDOUT\s0.  \s-1STDOUT\s0 can then be 
redirected to another file to produce the modified file.
.IP "\fB\-q\fR, \fB\-\-quiet\fR" 4
.IX Item "-q, --quiet"
Normally vanityhash sends a fair amount of status information to \s-1STDERR\s0 
during operation.  When enabled, all non-error status information is 
instead suppressed.
.IP "\fB\-?\fR, \fB\-\-help\fR" 4
.IX Item "-?, --help"
Print a synposis and exit.
.SH "BUGS / LIMITATIONS"
.IX Header "BUGS / LIMITATIONS"
Search spaces larger than 32 bits require a 64\-bit operating system, 
and a version of Perl compiled with 64\-bit integer support.
.PP
A block of computed data is added equal to the size of the integer type 
the search space fits into (1 byte for 8 bits or less, 2 bytes for 9 
through 16 bits, 4 bytes for 17 through 32 bits, 8 bytes for 33 through 
64 bits), even if the search space could fit into a smaller raw byte 
block (say, 3 bytes for a 20\-bit search space).  While this does not 
reduce (or increase) the possibility of finding a match in a given 
search space, the extra null byte(s) in the block are technically 
wasteful.
.PP
Extra bytes are packed according to system endianness.  Thus, search 
results will be different between big and little endian systems.
.PP
vanityhash should work fine on any \s-1POSIX\s0 operating system, and has been 
tested on Linux and Mac \s-1OS\s0 X.  It mostly works with Strawberry Perl for 
Windows, but crashes at the end.  Suggestions to fix this would be 
welcomed.
.SH "CREDITS"
.IX Header "CREDITS"
\&\fBvanityhash\fR was written by Ryan Finnie <ryan@finnie.org>.  vanityhash 
was inspired by Seth David Schoen's 2003 program, hash_search.
